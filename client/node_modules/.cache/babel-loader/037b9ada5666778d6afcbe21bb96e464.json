{"ast":null,"code":"import { ADD_ORDER } from \"../actions/orders.actions\";\nconst initialState = {\n  orders: []\n};\n/** {\r\n            id: 1,\r\n            name: \"Apple order\",\r\n            amount: 12,\r\n            totalPrice: 100,\r\n            product: {\r\n                _id: \"2\", name: \"Apple\", description: \"This is Apple and it is healthy\",\r\n               \r\n            },\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Straw order\",\r\n            amount: 7,\r\n            totalPrice: 7,\r\n            product: {\r\n                _id: \"3\", name: \"Straw\", description: \"This is Straw and you can use it for your drink\"\r\n            },\r\n        } */\nfunction orderReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_ORDER:\n      {\n        let maxId = Math.max.apply(Math, state.orders.map(o => {\n          return o.id;\n        }));\n        if (maxId === -Infinity) {\n          maxId = 0;\n        }\n        return {\n          ...state,\n          orders: [...state.orders, {\n            ...action.order,\n            id: maxId + 1\n          }]\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport default orderReducer;","map":{"version":3,"names":["ADD_ORDER","initialState","orders","orderReducer","state","arguments","length","undefined","action","type","maxId","Math","max","apply","map","o","id","Infinity","order"],"sources":["C:/iDAS/client/src/store/reducers/order.reducer.ts"],"sourcesContent":["import { IOrdersState, IActionBase } from \"../models/root.interface\";\r\nimport { ADD_ORDER } from \"../actions/orders.actions\";\r\n\r\n\r\nconst initialState: IOrdersState = {\r\n    orders: [\r\n       \r\n    ]\r\n};\r\n/** {\r\n            id: 1,\r\n            name: \"Apple order\",\r\n            amount: 12,\r\n            totalPrice: 100,\r\n            product: {\r\n                _id: \"2\", name: \"Apple\", description: \"This is Apple and it is healthy\",\r\n               \r\n            },\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Straw order\",\r\n            amount: 7,\r\n            totalPrice: 7,\r\n            product: {\r\n                _id: \"3\", name: \"Straw\", description: \"This is Straw and you can use it for your drink\"\r\n            },\r\n        } */\r\nfunction orderReducer(state: IOrdersState = initialState, action: IActionBase): IOrdersState {\r\n    switch (action.type) {\r\n        case ADD_ORDER: {\r\n            let maxId: number = Math.max.apply(Math, state.orders.map((o) => { return o.id; }));\r\n            if(maxId === -Infinity) { maxId = 0; }\r\n            return {...state, orders: [...state.orders, {...action.order, id: maxId + 1}]};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default orderReducer;"],"mappings":"AACA,SAASA,SAAS,QAAQ,2BAA2B;AAGrD,MAAMC,YAA0B,GAAG;EAC/BC,MAAM,EAAE;AAGZ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAAA,EAAwE;EAAA,IAAvEC,KAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,YAAY;EAAA,IAAEO,MAAmB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzE,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKT,SAAS;MAAE;QACZ,IAAIU,KAAa,GAAGC,IAAI,CAACC,GAAG,CAACC,KAAK,CAACF,IAAI,EAAEP,KAAK,CAACF,MAAM,CAACY,GAAG,CAAEC,CAAC,IAAK;UAAE,OAAOA,CAAC,CAACC,EAAE;QAAE,CAAC,CAAC,CAAC;QACnF,IAAGN,KAAK,KAAK,CAACO,QAAQ,EAAE;UAAEP,KAAK,GAAG,CAAC;QAAE;QACrC,OAAO;UAAC,GAAGN,KAAK;UAAEF,MAAM,EAAE,CAAC,GAAGE,KAAK,CAACF,MAAM,EAAE;YAAC,GAAGM,MAAM,CAACU,KAAK;YAAEF,EAAE,EAAEN,KAAK,GAAG;UAAC,CAAC;QAAC,CAAC;MAClF;IACA;MACI,OAAON,KAAK;EACpB;AACJ;AAGA,eAAeD,YAAY"},"metadata":{},"sourceType":"module"}